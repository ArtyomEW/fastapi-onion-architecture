"""db create

Revision ID: 7f1f83e41d04
Revises: 
Create Date: 2025-01-16 10:03:20.159261

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7f1f83e41d04'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('groups',
                    sa.Column('uuid', sa.Uuid(), nullable=False),
                    sa.Column('number_group', sa.String(length=100), nullable=False),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('number_group')
                    )
    op.create_table('subjects',
                    sa.Column('uuid', sa.Uuid(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('teachers',
                    sa.Column('uuid', sa.Uuid(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('surname', sa.String(), nullable=False),
                    sa.Column('father_name', sa.String(), nullable=True),
                    sa.Column('login', sa.String(length=100), nullable=False),
                    sa.Column('hashed_password', sa.String(), nullable=False),

                    sa.Column('is_role', sa.Enum('professor', 'associate_professor', 'senior_lecturer', 'assistant',
                                                 name='enumteachers').with_variant(
                        postgresql.ENUM('professor', 'associate_professor', 'senior_lecturer', 'assistant',
                                        name='enumteachers',
                                        create_type=False), 'postgresql',
                    ), nullable=False),

                    sa.Column('is_active', sa.Integer(), nullable=False),
                    sa.Column('created_on', sa.DateTime(), nullable=False),
                    sa.Column('updated_on', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('login')
                    )
    op.create_table('groups_subjects',
                    sa.Column('groups_uuid', sa.Uuid(), nullable=False),
                    sa.Column('subject_uuid', sa.Uuid(), nullable=False),
                    sa.ForeignKeyConstraint(['groups_uuid'], ['groups.uuid'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['subject_uuid'], ['subjects.uuid'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('groups_uuid', 'subject_uuid')
                    )
    op.create_table('students',
                    sa.Column('uuid', sa.Uuid(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('surname', sa.String(), nullable=False),
                    sa.Column('father_name', sa.String(), nullable=True),
                    sa.Column('login', sa.String(length=100), nullable=False),
                    sa.Column('hashed_password', sa.String(), nullable=False),
                    sa.Column('faculty', sa.String(), nullable=True),
                    sa.Column('is_role', sa.Enum('student', 'headman', name='enumstudents').with_variant(
                        postgresql.ENUM('student', 'headman', name='enumstudents',
                                        create_type=False), 'postgresql',
                    ), nullable=False),
                    sa.Column('is_active', sa.Integer(), nullable=False),
                    sa.Column('created_on', sa.DateTime(), nullable=False),
                    sa.Column('updated_on', sa.DateTime(), nullable=False),
                    sa.Column('group_uuid', sa.Uuid(), nullable=True),
                    sa.ForeignKeyConstraint(['group_uuid'], ['groups.uuid'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('login')
                    )
    op.create_table('teachers_groups',
                    sa.Column('teacher_uuid', sa.Uuid(), nullable=False),
                    sa.Column('group_uuid', sa.Uuid(), nullable=False),
                    sa.ForeignKeyConstraint(['group_uuid'], ['groups.uuid'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['teacher_uuid'], ['teachers.uuid'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('teacher_uuid', 'group_uuid')
                    )
    op.create_table('teachers_subjects',
                    sa.Column('teacher_uuid', sa.Uuid(), nullable=False),
                    sa.Column('subject_uuid', sa.Uuid(), nullable=False),
                    sa.ForeignKeyConstraint(['subject_uuid'], ['subjects.uuid'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['teacher_uuid'], ['teachers.uuid'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('teacher_uuid', 'subject_uuid')
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('teachers_subjects')
    op.drop_table('teachers_groups')
    op.drop_table('students')
    op.drop_table('groups_subjects')
    op.drop_table('teachers')
    op.drop_table('subjects')
    op.drop_table('groups')
    # ### end Alembic commands ###
